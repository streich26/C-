// 대표적인 컨테이너 // vector<T> 배열과는 달리 추가 삭제가 가능하다.
// 반복자(iterator) - 데이터를 가르키는 거, 포인터
// 알고리즘 (algorithm) - 데이터를 처리하는 방법

// sort 함수
//		sort(start, end);	//범위지정

#include <iostream>
// STL 컨테이너들
#include <vector>
#include <list>
#include <map>
#include <set>
// STL algorithm
#include <algorithm>
#include <functional> // functor(함수객체)

using namespace std;

int main()
{
	//int Arr[10]; //고정 배열
	//vector<int> v = {1,2,3}; //int 가변 배열
	//cout << v[0] << endl;
	//cout << v[1] << endl;
	//cout << v[2] << endl;
	//for (size_t i = 0; i < v.size();/*sizeof(v)*/ i++)
	//{
	//	cout << v[i] << endl;
	//}
	//v.push_back(10);	// 맨 뒤에 것에 10을 추가해라
	//v.pop_back();		// 맨뒤에 것을 빼라
	

	// 대문자 ABCD 벡터에 담아서 출력
	//vector<char> c = { 'A','B','C','D' };
	//c.push_back('E');
	//for (size_t i = 0; i < c.size();/*sizeof(v)*/ i++)
	//{
	//	cout << c[i] << endl;
	//}

	//vector<int> v1(3);		//int 형 벡터 3개 만들라
	//vector<int> v2(5, 2);	//int 형 벡터 5개를 2로 초기화해서 만들어라
	//for (size_t i = 0; i < v2.size();/*sizeof(v)*/ i++)
	//{
	//	cout << v2[i] << endl;
	//}
// iterator(반복자)---------------------------------------------------------------
	/*vector<int> vv = { 1,2,3 };
	vector<int>::iterator iter;*/
	//iter = vv.begin();
	//
	//cout << *iter << endl;		//두 개가 가르키는 게 같다
	//cout << vv[0] << endl;

	//cout << *(iter + 1) << endl;
	//
	//iter = vv.end();   //3이 아니라 3 다음 위치이다. 맨끝 다음것을 위치한다. 저 위치 그대로 출력하면 다운된다.
	
	//for (int i = 0; i < vv.size(); i++)
	//{
	//	cout << vv[i] << endl;
	//}
	/*for (iter = vv.begin(); iter != vv.end(); iter++)
	{
		cout << *iter << endl;
	}*/
// 알고리즘 (algorithm)----------------------------------------------------
	vector<int> v = { 1,4,5,3,6, };
	vector<int>::iterator start = v.begin();
	vector<int>::iterator end = v.end();

	sort(v.begin(), v.end());  // 다른 컨테이너를 써도 동일한 알고리즘으로 똑같이 작동할 수 있다.
	sort(v.begin(), v.end(), greater<int>());  // 함수 객체를 추가한다. (내림차순으로 정렬한다.)


	for (auto it = v.begin(); it != v.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;
